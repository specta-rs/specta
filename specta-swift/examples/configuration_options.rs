use specta::{Type, TypeCollection};
use specta_swift::{GenericStyle, IndentStyle, NamingConvention, OptionalStyle, Swift};

/// Comprehensive example showcasing ALL configuration options for specta-swift
///
/// This example demonstrates every configuration option available in the Swift exporter,
/// showing how different settings affect the generated Swift code.

/// Sample types for demonstration
#[derive(Type)]
struct User {
    user_id: u32,
    full_name: String,
    email_address: Option<String>,
    is_verified: bool,
}

#[derive(Type)]
enum ApiResponse<T> {
    Success { data: T, status_code: u16 },
    Error { message: String, error_code: u32 },
    Loading { progress: f32 },
}

#[derive(Type)]
struct GenericContainer<T, U> {
    primary: T,
    secondary: U,
    metadata: Option<Vec<(String, String)>>,
}

fn main() {
    println!("üöÄ Configuration Options Example - All Swift exporter settings");
    println!("{}", "=".repeat(70));

    // Sample types for all examples
    let types = TypeCollection::default()
        .register::<User>()
        .register::<ApiResponse<String>>()
        .register::<GenericContainer<String, u32>>();

    // 1. DEFAULT CONFIGURATION
    println!("\nüìã 1. DEFAULT CONFIGURATION");
    println!("{}", "-".repeat(40));
    let default_swift = Swift::default();
    let default_output = default_swift.export(&types).unwrap();
    println!("{}", default_output);
    default_swift
        .export_to("./examples/generated/DefaultConfig.swift", &types)
        .unwrap();
    println!("‚úÖ Default configuration exported to DefaultConfig.swift");

    // 2. CUSTOM HEADER
    println!("\nüìã 2. CUSTOM HEADER");
    println!("{}", "-".repeat(40));
    let custom_header = Swift::new()
        .header("// Generated by MyAwesomeApp v2.0\n// Custom header with app info\n// DO NOT EDIT MANUALLY");
    let header_output = custom_header.export(&types).unwrap();
    println!("{}", header_output);
    custom_header
        .export_to("./examples/generated/CustomHeader.swift", &types)
        .unwrap();
    println!("‚úÖ Custom header exported to CustomHeader.swift");

    // 3. DIFFERENT NAMING CONVENTIONS
    println!("\nüìã 3. NAMING CONVENTIONS");
    println!("{}", "-".repeat(40));

    // PascalCase (default)
    let pascal_case = Swift::new().naming(NamingConvention::PascalCase);
    let pascal_output = pascal_case.export(&types).unwrap();
    println!("PascalCase output:\n{}", pascal_output);
    pascal_case
        .export_to("./examples/generated/PascalCase.swift", &types)
        .unwrap();

    // camelCase
    let camel_case = Swift::new().naming(NamingConvention::CamelCase);
    let camel_output = camel_case.export(&types).unwrap();
    println!("camelCase output:\n{}", camel_output);
    camel_case
        .export_to("./examples/generated/CamelCase.swift", &types)
        .unwrap();

    // snake_case
    let snake_case = Swift::new().naming(NamingConvention::SnakeCase);
    let snake_output = snake_case.export(&types).unwrap();
    println!("snake_case output:\n{}", snake_output);
    snake_case
        .export_to("./examples/generated/SnakeCase.swift", &types)
        .unwrap();
    println!("‚úÖ Naming conventions exported to separate files");

    // 4. INDENTATION STYLES
    println!("\nüìã 4. INDENTATION STYLES");
    println!("{}", "-".repeat(40));

    // Spaces (default: 4 spaces)
    let spaces_4 = Swift::new().indent(IndentStyle::Spaces(4));
    let spaces_output = spaces_4.export(&types).unwrap();
    println!("4 Spaces indentation:\n{}", spaces_output);
    spaces_4
        .export_to("./examples/generated/Spaces4.swift", &types)
        .unwrap();

    // 2 Spaces
    let spaces_2 = Swift::new().indent(IndentStyle::Spaces(2));
    let spaces2_output = spaces_2.export(&types).unwrap();
    println!("2 Spaces indentation:\n{}", spaces2_output);
    spaces_2
        .export_to("./examples/generated/Spaces2.swift", &types)
        .unwrap();

    // Tabs
    let tabs = Swift::new().indent(IndentStyle::Tabs);
    let tabs_output = tabs.export(&types).unwrap();
    println!("Tabs indentation:\n{}", tabs_output);
    tabs.export_to("./examples/generated/Tabs.swift", &types)
        .unwrap();
    println!("‚úÖ Indentation styles exported to separate files");

    // 5. GENERIC STYLES
    println!("\nüìã 5. GENERIC STYLES");
    println!("{}", "-".repeat(40));

    // Protocol constraints (default)
    let protocol_generics = Swift::new().generics(GenericStyle::Protocol);
    let protocol_output = protocol_generics.export(&types).unwrap();
    println!("Protocol constraints:\n{}", protocol_output);
    protocol_generics
        .export_to("./examples/generated/ProtocolGenerics.swift", &types)
        .unwrap();

    // Typealias constraints
    let typealias_generics = Swift::new().generics(GenericStyle::Typealias);
    let typealias_output = typealias_generics.export(&types).unwrap();
    println!("Typealias constraints:\n{}", typealias_output);
    typealias_generics
        .export_to("./examples/generated/TypealiasGenerics.swift", &types)
        .unwrap();
    println!("‚úÖ Generic styles exported to separate files");

    // 6. OPTIONAL STYLES
    println!("\nüìã 6. OPTIONAL STYLES");
    println!("{}", "-".repeat(40));

    // Question mark syntax (default)
    let question_mark = Swift::new().optionals(OptionalStyle::QuestionMark);
    let question_output = question_mark.export(&types).unwrap();
    println!("Question mark syntax:\n{}", question_output);
    question_mark
        .export_to("./examples/generated/QuestionMark.swift", &types)
        .unwrap();

    // Optional type syntax
    let optional_type = Swift::new().optionals(OptionalStyle::Optional);
    let optional_output = optional_type.export(&types).unwrap();
    println!("Optional type syntax:\n{}", optional_output);
    optional_type
        .export_to("./examples/generated/OptionalType.swift", &types)
        .unwrap();
    println!("‚úÖ Optional styles exported to separate files");

    // 7. ADDITIONAL PROTOCOLS
    println!("\nüìã 7. ADDITIONAL PROTOCOLS");
    println!("{}", "-".repeat(40));
    let with_protocols = Swift::new()
        .add_protocol("Equatable")
        .add_protocol("Hashable")
        .add_protocol("CustomStringConvertible");
    let protocols_output = with_protocols.export(&types).unwrap();
    println!("With additional protocols:\n{}", protocols_output);
    with_protocols
        .export_to("./examples/generated/WithProtocols.swift", &types)
        .unwrap();
    println!("‚úÖ Additional protocols exported to WithProtocols.swift");

    // 8. SERDE VALIDATION
    println!("\nüìã 8. SERDE VALIDATION");
    println!("{}", "-".repeat(40));
    let with_serde = Swift::new().with_serde();
    let serde_output = with_serde.export(&types).unwrap();
    println!("With Serde validation:\n{}", serde_output);
    with_serde
        .export_to("./examples/generated/WithSerde.swift", &types)
        .unwrap();
    println!("‚úÖ Serde validation exported to WithSerde.swift");

    // 9. COMBINED CUSTOM CONFIGURATION
    println!("\nüìã 9. COMBINED CUSTOM CONFIGURATION");
    println!("{}", "-".repeat(40));
    let combined = Swift::new()
        .header("// My Custom App Types\n// Generated with love ‚ù§Ô∏è")
        .naming(NamingConvention::CamelCase)
        .indent(IndentStyle::Spaces(2))
        .generics(GenericStyle::Typealias)
        .optionals(OptionalStyle::Optional)
        .add_protocol("Equatable")
        .add_protocol("Hashable")
        .with_serde();

    let combined_output = combined.export(&types).unwrap();
    println!("Combined custom configuration:\n{}", combined_output);
    combined
        .export_to("./examples/generated/CombinedConfig.swift", &types)
        .unwrap();
    println!("‚úÖ Combined configuration exported to CombinedConfig.swift");

    println!("\nüéâ All configuration examples completed!");
    println!("\nüìÅ Generated files:");
    println!("‚Ä¢ DefaultConfig.swift - Default settings");
    println!("‚Ä¢ CustomHeader.swift - Custom header");
    println!("‚Ä¢ PascalCase.swift, CamelCase.swift, SnakeCase.swift - Naming conventions");
    println!("‚Ä¢ Spaces4.swift, Spaces2.swift, Tabs.swift - Indentation styles");
    println!("‚Ä¢ ProtocolGenerics.swift, TypealiasGenerics.swift - Generic styles");
    println!("‚Ä¢ QuestionMark.swift, OptionalType.swift - Optional styles");
    println!("‚Ä¢ WithProtocols.swift - Additional protocols");
    println!("‚Ä¢ WithSerde.swift - Serde validation");
    println!("‚Ä¢ CombinedConfig.swift - Combined custom settings");
}
