use std::time::SystemTime;

use specta::Type;

#[derive(Type)]
pub struct TypeOne {
    pub field1: String,
    pub field2: TypeTwo,
}

#[derive(Type)]
pub struct TypeTwo {
    pub my_field: String,
}

#[derive(Type)]
#[specta(collect = false)]
pub struct NotExported {
    pub b: i32,
}

// TODO: This type is not gonna export correctly. Fix this. It should probally inline `NotExported`????
#[derive(Type)]
pub struct ReferingToUnexportedType {
    pub a: NotExported,
    pub b: SystemTime,
}

// TODO: Enable this test on Windows again. It's ordering of types is different for seemingly no reason.
#[cfg(all(not(target_os = "windows"), all(feature = "collect", feature = "ts")))]
#[test]
fn test_export_feature() {
    use specta::{
        export,
        ts::{BigIntExportBehavior, ExportConfig},
    };
    use std::fs;

    // This test fails with `--all-features` because the uhlc library uses BigInt's and will always be registered when the `uhlc` feature is enabled.
    // export::ts("./bindings.ts").unwrap();
    // assert_eq!(fs::read_to_string("./bindings.ts").unwrap(), "");
    // fs::remove_file("./bindings.ts").unwrap();

    export::ts_with_cfg(
        "./bindings2.ts",
        // Be aware this won't be typesafe unless your using a ser/deserializer that converts BigInt types to a number.
        &ExportConfiguration::default().bigint(BigIntExportBehavior::Number),
    )
    .unwrap();
    assert_eq!(fs::read_to_string("./bindings2.ts").unwrap(), "// This file has been generated by Specta. DO NOT EDIT.\n\nexport type ReferingToUnexportedType = { a: NotExported; b: SystemTime }\n\nexport type NestedEnum = { type: \"a\"; value: string } | { type: \"b\"; value: number }\n\nexport type TypeOne = { field1: string; field2: TypeTwo }\n\nexport type FlattenOnNestedEnum = ({ type: \"a\"; value: string } | { type: \"b\"; value: number }) & { id: string }\n\nexport type TypeTwo = { my_field: string }\n\n");
    fs::remove_file("./bindings2.ts").unwrap();

    // TODO: Test order of iterator is type order and check it picks up the right number of types.
}
